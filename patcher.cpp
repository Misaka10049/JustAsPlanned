#include<iostream>
#include<fstream>
#include<vector>
#include<sstream>
using namespace std;
vector<string>split(const string& s,char delimiter){
	vector<string>tokens;
	string token;
	istringstream tokenStream(s);
	while(getline(tokenStream,token,delimiter))
		tokens.push_back(token);
	return tokens;
}
vector<int>compute_prefix_function(const vector<int>& pattern){
	int m=pattern.size();
	vector<int>pi(m);
	int k=0;
	for(int q=1;q<m;q++){
		while(k>0&&pattern[k]!=pattern[q]) k=pi[k-1];
		if(pattern[k]==pattern[q]) k++;
		pi[q]=k;
	}
	return pi;
}
// Here we use the Knuth-Morris-Pratt algorithm to find the pattern in the data
int kmp_matcher(vector<uint8_t>& data,const string& pattern){
	vector<string>pattern_bytes=split(pattern,' ');
	vector<int>p;
	for(const auto& byte:pattern_bytes){
		if(byte!="??")
			p.push_back(stoi(byte,nullptr,16));
		else p.push_back(-1);
	}
	int n=data.size();
	int m=p.size();
	vector<int>pi=compute_prefix_function(p);
	int q=0;
	for(int i=0;i<n;i++){
		while(q>0&&(p[q]!=data[i]&&p[q]!=-1)) q=pi[q-1];
		if(p[q]==data[i]||p[q]==-1) q++;
		if(q==m)
			return i-m+1;
	}
	return -1;
}

void patch(const string& in_file,const string& out_file,const vector<pair<string,string>>& byte_pairs){
	ifstream input(in_file,ios::binary);
	if(!input.good()){
		cout<<"找不到 GameAssembly.dll 文件\n";
		return;
	}
	vector<uint8_t>data((istreambuf_iterator<char>(input)),istreambuf_iterator<char>());
	for(int i=0;i<=2;i++){
		string orig=byte_pairs[i].first,repl=byte_pairs[i].second;
		int index=kmp_matcher(data,orig);
		if(index!=-1){
			cout<<"Found a match for "<<orig<<" at offset: "<<hex<<index<<endl;
			vector<uint8_t>repl_bytes;
			istringstream hex_chars_stream(repl);
			unsigned int c;
			while(hex_chars_stream>>hex>>c) repl_bytes.push_back(c);
			if(repl_bytes.size()<split(orig,' ').size()) repl_bytes.insert(repl_bytes.end(),split(orig,' ').size()-repl_bytes.size(),0);
			copy(repl_bytes.begin(),repl_bytes.end(),data.begin()+index);
		}
		else
			cout<<"No matches found for "<<orig<<endl;
	}
	ofstream output(out_file,ios::binary);
	output.write(reinterpret_cast<const char*>(data.data()),data.size());
}
int main(){
	vector<pair<string,string>>match={
		{"40 53 48 83 EC ?? 8B D9 33 C9 E8 ?? ?? ?? ?? 80 3D ?? ?? ?? ?? ?? 75 ?? 8B 0D ?? ?? ?? ?? E8 ?? ?? ?? ?? C6 05 ?? ?? ?? ?? ?? 48 8B 05 ?? ?? ?? ?? 45 33 C0 8B D3 48 8B 88 ?? ?? ?? ?? 48 8B 49 ?? 48 83 C4 ?? 5B E9 ?? ?? ?? ?? CC CC CC CC CC 48 83 EC ?? 33 C9 E8 ?? ?? ?? ?? 80 3D ?? ?? ?? ?? ?? 75 ?? 8B 0D ?? ?? ?? ?? E8 ?? ?? ?? ?? C6 05 ?? ?? ?? ?? ?? 48 8B 05 ?? ?? ?? ?? 33 D2 48 8B 88 ?? ?? ?? ?? 48 8B 49 ?? 48 83 C4 ?? E9 ?? ?? ?? ?? CC CC CC CC CC CC CC CC CC CC CC CC CC 40 53 48 83 EC ?? 8B D9 33 C9 E8 ?? ?? ?? ?? 80 3D ?? ?? ?? ?? ?? 75 ?? 8B 0D ?? ?? ?? ?? E8 ?? ?? ?? ?? C6 05 ?? ?? ?? ?? ?? 48 8B 05 ?? ?? ?? ?? 45 33 C0 8B D3 48 8B 88 ?? ?? ?? ?? 48 8B 49 ?? 48 83 C4 ?? 5B E9 ?? ?? ?? ?? CC CC CC CC CC 48 83 EC ?? 33 C9 E8 ?? ?? ?? ?? 80 3D ?? ?? ?? ?? ?? 75 ?? 8B 0D ?? ?? ?? ?? E8 ?? ?? ?? ?? C6 05 ?? ?? ?? ?? ?? 48 8B 05 ?? ?? ?? ?? 33 D2 48 8B 88 ?? ?? ?? ?? 48 8B 49 ?? 48 83 C4 ?? E9 ?? ?? ?? ?? CC CC CC CC CC CC CC CC CC CC CC CC CC 48 83 EC","48 B8 01 00 00 00 00 00 00 00 C3"},//public static bool BIsDlcInstalled(AppId_t appID){}
		{"40 53 48 83 EC ?? 8B D9 33 C9 E8 ?? ?? ?? ?? 80 3D ?? ?? ?? ?? ?? 75 ?? 8B 0D ?? ?? ?? ?? E8 ?? ?? ?? ?? C6 05 ?? ?? ?? ?? ?? 48 8B 05 ?? ?? ?? ?? 45 33 C0 8B D3 48 8B 88 ?? ?? ?? ?? 48 8B 49 ?? 48 83 C4 ?? 5B E9 ?? ?? ?? ?? CC CC CC CC CC 40 55 53","B8 85 47 DE 63 C3"},//public static uint GetEarliestPurchaseUnixTime(AppId_t nAppID){}
		{"48 83 EC ?? 80 3D ?? ?? ?? ?? ?? 75 ?? 8B 0D ?? ?? ?? ?? E8 ?? ?? ?? ?? C6 05 ?? ?? ?? ?? ?? 48 8B 0D ?? ?? ?? ?? F6 81 ?? ?? ?? ?? ?? 74 ?? 83 B9 ?? ?? ?? ?? ?? 75 ?? E8 ?? ?? ?? ?? 33 C9 E8 ?? ?? ?? ?? 84 C0 0F 85","48 B8 01 00 00 00 00 00 00 00 C3"} //public static bool get_isSelectedUnlockMaster(){}
	};
	string infile="GameAssembly.dll",outfile="GameAssembly_patched.dll";
	patch(infile,outfile,match);
	cout<<"按任意键退出";
	cin.get();
	return 0;
}
